public void test ( ) { if ( paint == null ) { throw new IllegalArgumentException ( "Null\'paint\'argument." ) ; } } 
public void test ( ) { if ( paint == null ) { throw new IllegalArgumentException ( "Null\'paint\'argument." ) ; } } 
public void test ( ) { Stroke stroke = getItemOutlineStroke ( row , column , selected ) ; Paint paint = getItemOutlinePaint ( row , column , selected ) ; if ( stroke != null && paint != null ) { g2 . setStroke ( stroke ) ; g2 . setPaint ( paint ) ; g2 . draw ( bar ) ; } } 
public void test ( ) { Shape shape = lookupLegendShape ( series ) ; Paint paint = lookupSeriesPaint ( series ) ; Paint fillPaint = ( this . useFillPaint ? getItemFillPaint ( series , 0 , false ) : paint ) ; } 
public void test ( ) { boolean shapeOutlineVisible = this . drawOutlines ; Paint outlinePaint = ( this . useOutlinePaint ? getItemOutlinePaint ( series , 0 , false ) : paint ) ; Stroke outlineStroke = lookupSeriesOutlineStroke ( series ) ; } 
public void test ( ) { if ( paint == null ) { throw new IllegalArgumentException ( "Null\'paint\'argument" ) ; } } 
public void test ( ) { Stroke stroke = renderer . getItemOutlineStroke ( row , column , selected ) ; Paint paint = renderer . getItemOutlinePaint ( row , column , selected ) ; if ( stroke != null && paint != null ) { g2 . setStroke ( stroke ) ; g2 . setPaint ( paint ) ; g2 . draw ( bar ) ; } } 
public void test ( ) { if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , value , dataArea . getMaxX ( ) , value ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( value , dataArea . getMinY ( ) , value , dataArea . getMaxY ( ) ) ; } g2 . setPaint ( paint ) ; g2 . setStroke ( stroke ) ; } 
public void test ( ) { if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } g2 . setPaint ( paint ) ; g2 . setStroke ( stroke ) ; } 
public void test ( ) { if ( paint == null && ! this . allowNull ) { throw new IllegalArgumentException ( "Null\'paint\'argument." ) ; } } 
public void test ( ) { if ( ! PaintUtilities . equal ( this . paint , that . paint ) ) { return false ; } } 
public void test ( ) { PaintItem item = new PaintItem ( value , paint ) ; int index = Collections . binarySearch ( this . lookupTable , item ) ; if ( index >= 0 ) { this . lookupTable . set ( index , item ) ; } else { this . lookupTable . add ( - ( index + 1 ) , item ) ; } } 
public void test ( ) { if ( getLegendItemURLGenerator ( ) != null ) { urlText = getLegendItemURLGenerator ( ) . generateLabel ( dataset , series ) ; } Paint paint = lookupSeriesPaint ( series ) ; result = new LegendItem ( label , description , toolTipText , urlText , this . legendArea , paint ) ; } 
public void test ( ) { if ( this . useFillPaint ) { paint = lookupSeriesFillPaint ( series ) ; } } 
public void test ( ) { if ( paint instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) paint ; GradientPaint adjGP = this . gradientTransformer . transform ( gp , dataArea ) ; g2 . setPaint ( adjGP ) ; } } 
public void test ( ) { if ( this . drawBarOutline ) { result = new LegendItem ( label , description , toolTipText , urlText , shape , paint , outlineStroke , outlinePaint ) ; } else { result = new LegendItem ( label , description , toolTipText , urlText , shape , paint ) ; } } 
public void test ( ) { if ( plot . getOrientation ( ) == PlotOrientation . VERTICAL ) { band = new Rectangle2D . Double ( Math . min ( x1 , x2 ) , dataArea . getMinY ( ) , Math . abs ( x2 - x1 ) , dataArea . getWidth ( ) ) ; } else { band = new Rectangle2D . Double ( dataArea . getMinX ( ) , Math . min ( x1 , x2 ) , dataArea . getWidth ( ) , Math . abs ( x2 - x1 ) ) ; } Paint paint = plot . getDomainTickBandPaint ( ) ; } 
public void test ( ) { if ( paint != null ) { g2 . setPaint ( paint ) ; g2 . fill ( band ) ; } } 
public void test ( ) { if ( plot . getOrientation ( ) == PlotOrientation . VERTICAL ) { band = new Rectangle2D . Double ( dataArea . getMinX ( ) , Math . min ( y1 , y2 ) , dataArea . getWidth ( ) , Math . abs ( y2 - y1 ) ) ; } else { band = new Rectangle2D . Double ( Math . min ( y1 , y2 ) , dataArea . getMinY ( ) , Math . abs ( y2 - y1 ) , dataArea . getHeight ( ) ) ; } Paint paint = plot . getRangeTickBandPaint ( ) ; } 
public void test ( ) { if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } Paint paint = plot . getDomainGridlinePaint ( ) ; Stroke stroke = plot . getDomainGridlineStroke ( ) ; } 
public void test ( ) { if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } g2 . setPaint ( paint ) ; g2 . setStroke ( stroke ) ; } 
public void test ( ) { if ( getLegendItemURLGenerator ( ) != null ) { urlText = getLegendItemURLGenerator ( ) . generateLabel ( dataset , series ) ; } Paint paint = lookupSeriesPaint ( series ) ; Stroke stroke = lookupSeriesStroke ( series ) ; } 
public void test ( ) { this . paintList . setPaint ( series , paint ) ; if ( notify ) { fireChangeEvent ( ) ; } } 
public void test ( ) { this . basePaint = paint ; if ( notify ) { fireChangeEvent ( ) ; } } 
public void test ( ) { this . fillPaintList . setPaint ( series , paint ) ; if ( notify ) { fireChangeEvent ( ) ; } } 
public void test ( ) { this . outlinePaintList . setPaint ( series , paint ) ; if ( notify ) { fireChangeEvent ( ) ; } } 
public void test ( ) { this . itemLabelPaintList . setPaint ( series , paint ) ; if ( notify ) { fireChangeEvent ( ) ; } } 
public void test ( ) { { g2 . setPaint ( this . paint ) ; if ( this . data != null ) { for ( int i = 0 ; i < this . data [ 0 ] . length ; i ++ ) { float x = this . data [ 0 ] [ i ] ; float y = this . data [ 1 ] [ i ] ; int transX = ( int ) this . domainAxis . valueToJava2D ( x , dataArea , RectangleEdge . BOTTOM ) ; int transY = ( int ) this . rangeAxis . valueToJava2D ( y , dataArea , RectangleEdge . LEFT ) ; g2 . fillRect ( transX , transY , 1 , 1 ) ; } } } } 
public void test ( ) { result = 37 * result + ( int ) ( temp ^ ( temp > > > 32 ) ) ; result = 37 * result + HashUtilities . hashCodeForPaint ( this . paint ) ; return result ; } 
public void test ( ) { Paint p = this . paint ; if ( p instanceof GradientPaint ) { p = this . gradientPaintTransformer . transform ( ( GradientPaint ) p , view ) ; } g2 . setPaint ( p ) ; g2 . fill ( view ) ; } 
public void test ( ) { int result = 193 ; result = 37 * result + HashUtilities . hashCodeForPaint ( this . paint ) ; result = 37 * result + this . gradientPaintTransformer . hashCode ( ) ; return result ; } 
public void test ( ) { int result = 193 ; result = 37 * result + HashUtilities . hashCodeForPaint ( this . paint ) ; result = 37 * result + HashUtilities . hashCodeForPaint ( this . backgroundPaint ) ; result = 37 * result + HashUtilities . hashCodeForPaint ( this . outlinePaint ) ; result = 37 * result + this . outlineStroke . hashCode ( ) ; return result ; } 
public void test ( ) { int result = super . hashCode ( ) ; result = HashUtilities . hashCode ( result , this . paint ) ; result = HashUtilities . hashCode ( result , this . stroke ) ; return result ; } 
public void test ( ) { if ( ! this . tickLabelPaint . equals ( paint ) ) { this . tickLabelPaint = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( paint != null && stroke != null ) { Arc2D . Double arc = new Arc2D . Double ( x , y , w , h , startAngle , extent , Arc2D . OPEN ) ; g2 . setPaint ( paint ) ; g2 . setStroke ( stroke ) ; g2 . draw ( arc ) ; } } 
public void test ( ) { if ( segment != null ) { Comparable key = getSectionKey ( cat ) ; paint = lookupSectionPaint ( key , false ) ; outlinePaint = lookupSectionOutlinePaint ( key , false ) ; outlineStroke = lookupSectionOutlineStroke ( key , false ) ; drawSide ( g2 , pieArea , segment , front , back , paint , outlinePaint , outlineStroke , false , true ) ; } } 
public void test ( ) { if ( segment != null ) { Comparable key = getSectionKey ( cat ) ; paint = lookupSectionPaint ( key , false ) ; outlinePaint = lookupSectionOutlinePaint ( key , false ) ; outlineStroke = lookupSectionOutlineStroke ( key , false ) ; drawSide ( g2 , pieArea , segment , front , back , paint , outlinePaint , outlineStroke , true , false ) ; } } 
public void test ( ) { if ( paint instanceof Color ) { Color c = ( Color ) paint ; c = c . darker ( ) ; paint = c ; } } 
public void test ( ) { side2 . intersect ( front ) ; g2 . setPaint ( paint ) ; if ( drawFront ) { g2 . fill ( side1 ) ; g2 . fill ( side2 ) ; } } 
public void test ( ) { side2 . intersect ( back ) ; g2 . setPaint ( paint ) ; if ( drawBack ) { g2 . fill ( side1 ) ; g2 . fill ( side2 ) ; } } 
public void test ( ) { if ( isDomainCrosshairVisible ( ) && columnKey != null ) { Paint paint = getDomainCrosshairPaint ( ) ; Stroke stroke = getDomainCrosshairStroke ( ) ; drawDomainCrosshair ( g2 , dataArea , this . orientation , datasetIndex , rowKey , columnKey , stroke , paint ) ; } } 
public void test ( ) { if ( isRangeCrosshairVisible ( ) ) { double y = getRangeCrosshairValue ( ) ; Paint paint = getRangeCrosshairPaint ( ) ; Stroke stroke = getRangeCrosshairStroke ( ) ; drawRangeCrosshair ( g2 , dataArea , getOrientation ( ) , y , yAxis , stroke , paint ) ; } } 
public void test ( ) { if ( index < 0 || index > 3 ) { throw new IllegalArgumentException ( "Theindexvalue(" + index ) ; } this . quadrantPaint [ index ] = paint ; fireChangeEvent ( ) ; } 
public void test ( ) { if ( isDomainCrosshairVisible ( ) ) { double x = getDomainCrosshairValue ( ) ; Paint paint = getDomainCrosshairPaint ( ) ; Stroke stroke = getDomainCrosshairStroke ( ) ; drawDomainCrosshair ( g2 , dataArea , orient , x , xAxis , stroke , paint ) ; } } 
public void test ( ) { if ( isRangeCrosshairVisible ( ) ) { double y = getRangeCrosshairValue ( ) ; Paint paint = getRangeCrosshairPaint ( ) ; Stroke stroke = getRangeCrosshairStroke ( ) ; drawRangeCrosshair ( g2 , dataArea , orient , y , yAxis , stroke , paint ) ; } } 
public void test ( ) { if ( axis . getRange ( ) . contains ( value ) ) { double yy = axis . valueToJava2D ( value , dataArea , RectangleEdge . LEFT ) ; Line2D line = new Line2D . Double ( dataArea . getMinX ( ) , yy , dataArea . getMaxX ( ) , yy ) ; g2 . setStroke ( stroke ) ; g2 . setPaint ( paint ) ; g2 . draw ( line ) ; } } 
public void test ( ) { if ( axis . getRange ( ) . contains ( value ) ) { double xx = axis . valueToJava2D ( value , dataArea , RectangleEdge . BOTTOM ) ; Line2D line = new Line2D . Double ( xx , dataArea . getMinY ( ) , xx , dataArea . getMaxY ( ) ) ; g2 . setStroke ( stroke ) ; g2 . setPaint ( paint ) ; g2 . draw ( line ) ; } } 
public void test ( ) { if ( this . legendLabelURLGenerator != null ) { urlText = this . legendLabelURLGenerator . generateURL ( this . dataset , key , this . pieIndex ) ; } Paint paint = lookupSectionPaint ( key , false ) ; Paint outlinePaint = lookupSectionOutlinePaint ( key , false ) ; } 
public void test ( ) { if ( paint != null ) { this . thermometerPaint = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( ! this . valuePaint . equals ( paint ) ) { this . valuePaint = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( ( range >= 0 ) && ( range < this . subrangePaint . length ) ) { this . subrangePaint [ range ] = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( alpha < 0.0 || alpha > 1.0 ) throw new IllegalArgumentException ( "The\'alpha\'valuemustbeintherange0.0fto1.0f" ) ; this . paint = paint ; this . stroke = stroke ; } 
public void test ( ) { if ( paint == null ) { if ( this . backgroundPaint != null ) { this . backgroundPaint = null ; fireChangeEvent ( ) ; } } else { if ( this . backgroundPaint != null ) { if ( this . backgroundPaint . equals ( paint ) ) { return ; } } this . backgroundPaint = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( paint == null ) { if ( this . outlinePaint != null ) { this . outlinePaint = null ; fireChangeEvent ( ) ; } } else { if ( this . outlinePaint != null ) { if ( this . outlinePaint . equals ( paint ) ) { return ; } } this . outlinePaint = paint ; fireChangeEvent ( ) ; } } 
public void test ( ) { if ( ( series >= 0 ) && ( series < this . seriesNeedle . length ) ) { this . seriesNeedle [ series ] . setFillPaint ( paint ) ; } } 
public void test ( ) { if ( key == null ) { throw new IllegalArgumentException ( "Null\'key\'argument." ) ; } this . store . put ( key , paint ) ; } 
public void test ( ) { if ( paint instanceof Serializable ) { stream . writeObject ( paint ) ; } else if ( paint instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) paint ; stream . writeFloat ( ( float ) gp . getPoint1 ( ) . getX ( ) ) ; stream . writeFloat ( ( float ) gp . getPoint1 ( ) . getY ( ) ) ; stream . writeObject ( gp . getColor1 ( ) ) ; stream . writeFloat ( ( float ) gp . getPoint2 ( ) . getX ( ) ) ; stream . writeFloat ( ( float ) gp . getPoint2 ( ) . getY ( ) ) ; stream . writeObject ( gp . getColor2 ( ) ) ; stream . writeBoolean ( gp . isCyclic ( ) ) ; } } 
public void test ( ) { Paint paint = getPaint ( i ) ; if ( paint != null ) { stream . writeInt ( i ) ; SerialUtilities . writePaint ( paint , stream ) ; } else { stream . writeInt ( - 1 ) ; } } 
public void test ( ) { if ( paint == null ) { throw new NullPointerException ( "Null\'paint\'argument." ) ; } } 
public void test ( ) { if ( ! this . paint . equals ( paint ) ) { this . paint = paint ; notifyListeners ( new TitleChangeEvent ( this ) ) ; } } 
public void test ( ) { int result = super . hashCode ( ) ; result = 29 * result + ( this . text != null ? this . text . hashCode ( ) : 0 ) ; result = 29 * result + ( this . font != null ? this . font . hashCode ( ) : 0 ) ; result = 29 * result + ( this . paint != null ? this . paint . hashCode ( ) : 0 ) ; result = 29 * result + ( this . backgroundPaint != null ? this . backgroundPaint . hashCode ( ) : 0 ) ; return result ; } 
public void test ( ) { if ( ! this . backgroundPaint . equals ( paint ) ) { this . backgroundPaint = paint ; fireChartChanged ( ) ; } } 
public void test ( ) { if ( paint != null ) { this . backgroundPaint = paint ; fireChartChanged ( ) ; } } 
public void test ( ) { Paint paint = getBorderPaint ( ) ; Stroke stroke = getBorderStroke ( ) ; if ( paint != null && stroke != null ) { Rectangle2D borderArea = new Rectangle2D . Double ( chartArea . getX ( ) , chartArea . getY ( ) , chartArea . getWidth ( ) - 1.0 , chartArea . getHeight ( ) - 1.0 ) ; g2 . setPaint ( paint ) ; g2 . setStroke ( stroke ) ; g2 . draw ( borderArea ) ; } } 
public void test ( ) { if ( ! PaintUtilities . equal ( this . paint , that . getPaint ( ) ) ) { return false ; } } 
public void test ( ) { if ( paint == null ) { this . tickLabelPaintMap . remove ( category ) ; } else { this . tickLabelPaintMap . put ( category , paint ) ; } } 
public void test ( ) { if ( index < input . length ( ) - 1 ) { result . addLine ( line , font , paint ) ; input = input . substring ( index + 1 ) ; } else { moreInputToProcess = false ; } } 
public void test ( ) { if ( next == BreakIterator . DONE ) { result . addLine ( text . substring ( current ) , font , paint ) ; return result ; } } 
public void test ( ) { if ( ! this . paint . equals ( tf . paint ) ) { return false ; } } 
public void test ( ) { int result ; result = ( this . text != null ? this . text . hashCode ( ) : 0 ) ; result = 29 * result + ( this . font != null ? this . font . hashCode ( ) : 0 ) ; result = 29 * result + ( this . paint != null ? this . paint . hashCode ( ) : 0 ) ; return result ; } 
public void test ( ) { if ( font == null ) { throw new IllegalArgumentException ( "Null\'font\'argument." ) ; } this . font = font ; this . label = TextUtilities . createTextBlock ( this . text , font , this . paint ) ; } 
public void test ( ) { if ( params instanceof EntityBlockParams ) { ebp = ( EntityBlockParams ) params ; if ( ebp . getGenerateEntities ( ) ) { sec = new StandardEntityCollection ( ) ; entityArea = ( Shape ) area . clone ( ) ; } } g2 . setPaint ( this . paint ) ; g2 . setFont ( this . font ) ; } 
public void test ( ) { if ( insets == null ) { throw new IllegalArgumentException ( "Null\'insets\'argument." ) ; } this . paint = paint ; this . stroke = stroke ; } 